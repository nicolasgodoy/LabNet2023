


/* Recuperación básica de datos */
/* 1 */
SELECT ID, 
	   LAST_NAME, 
	   HIRE_DATE,
	   SALARY
FROM TEST.EMPlOYEES

/* 2 */
SELECT ID, 
	   LAST_NAME, 
	   HIRE_DATE,
	   SALARY * 12 AS SALARIO_ANUAL
FROM TEST.EMPlOYEES
WHERE DEPARTMENT_ID IS NOT NULL

/* 3 */
SELECT ID, 
	   FIRST_NAME + ' || ' + LAST_NAME AS NOMBRE_APELLIDO, 
	   HIRE_DATE,
	   SALARY * 12 AS NOMBRE_APELLIDO
FROM TEST.EMPlOYEES
WHERE DEPARTMENT_ID IS NOT NULL

/* 4 */
SELECT DEPARTMENT_ID 
FROM TEST.EMPLOYEES
WHERE DEPARTMENT_ID IS NOT NULL

/* 5 */
SELECT DISTINCT DEPARTMENT_ID 
FROM TEST.EMPLOYEES
WHERE DEPARTMENT_ID IS NOT NULL

/* Comparaciones simples y especiales / Comparaciones nulas */

/* 6 */
SELECT * 
FROM TEST.EMPLOYEES
WHERE SALARY < 2000

/* 7 */
SELECT * 
FROM TEST.EMPLOYEES
WHERE SALARY BETWEEN  1800 AND 3000

/* 8 */
SELECT * 
FROM TEST.EMPLOYEES
WHERE DEPARTMENT_ID IN (10,30,31)

/* 9 */
SELECT * 
FROM TEST.EMPLOYEES
WHERE FIRST_NAME LIKE 'F%'

/* 10 */
SELECT * 
FROM TEST.EMPLOYEES
WHERE JOB_ID IS NULL

/* 10 */
SELECT * 
FROM TEST.EMPLOYEES
WHERE JOB_ID IS NOT NULL

/* Comparaciones con nexos lógicos / Precedencia de condiciones */
/* 11 */
SELECT * 
FROM TEST.EMPLOYEES
WHERE JOB_ID = 'FQ_SPV' OR JOB_ID = 'AD_CTB' AND SALARY > 1900

/* Ordenamiento */
/* 13 */

SELECT * 
FROM TEST.EMPLOYEES
ORDER BY HIRE_DATE

/* 14 */
SELECT * 
FROM TEST.EMPLOYEES
ORDER BY HIRE_DATE DESC , LAST_NAME ASC

/* 15 */
SELECT LAST_NAME,
	   SALARY * 12 AS SALARIO_ANUAL
FROM TEST.EMPLOYEES
ORDER BY SALARIO_ANUAL
 
/* Uso de cláusula JOIN */

/* 17 */
SELECT  TEST.EMPLOYEES.FIRST_NAME, 
		TEST.EMPLOYEES.LAST_NAME,
		TEST.EMPLOYEES.SALARY,
		TEST.EMPLOYEES.DEPARTMENT_ID,
		TEST.EMPLOYEES.JOB_ID,
		TEST.EMPLOYEES.HIRE_DATE,
		TEST.EMPLOYEES.MANAGER_ID, 
		TEST.DEPARTMENTS.DEPARTMENT_DESCRIPTION
FROM TEST.EMPLOYEES JOIN TEST.DEPARTMENTS 
ON (TEST.DEPARTMENTS.ID = TEST.EMPLOYEES.DEPARTMENT_ID)

/* 18 */
SELECT  TEST.EMPLOYEES.FIRST_NAME, 
		TEST.EMPLOYEES.LAST_NAME,
		TEST.EMPLOYEES.SALARY,
		TEST.EMPLOYEES.DEPARTMENT_ID,
		TEST.EMPLOYEES.JOB_ID,
		TEST.EMPLOYEES.HIRE_DATE,
		TEST.EMPLOYEES.MANAGER_ID, 
		TEST.DEPARTMENTS.DEPARTMENT_DESCRIPTION
FROM TEST.EMPLOYEES LEFT JOIN TEST.DEPARTMENTS 
ON (TEST.DEPARTMENTS.ID = TEST.EMPLOYEES.DEPARTMENT_ID) 

/* 19 */
SELECT  TEST.DEPARTMENTS.DEPARTMENT_NAME,
		TEST.DEPARTMENTS.LOCATION_ID,
		TEST.DEPARTMENTS.DEPARTMENT_DESCRIPTION,
		TEST.EMPLOYEES.FIRST_NAME AS EMPLEADOS
FROM TEST.DEPARTMENTS LEFT JOIN TEST.EMPLOYEES
ON (TEST.DEPARTMENTS.ID = TEST.EMPLOYEES.DEPARTMENT_ID) 


/* 20 */
/* SELF JOIN */
SELECT  SUBORDINADOS.ID AS SUBORDINADOS_ID,
		SUBORDINADOS.FIRST_NAME AS SUBORDINADOS_FIRST_NAME,
		SUBORDINADOS.LAST_NAME AS SUBORDINADOS_LAST_NAME,
		MANAGERS.ID AS MANAGERS_ID,
		MANAGERS.FIRST_NAME AS MANAGERS_FIRST_NAME,
		MANAGERS.LAST_NAME AS MANAGERS_LAST_NAME
FROM TEST.EMPLOYEES AS SUBORDINADOS JOIN TEST.EMPLOYEES AS MANAGERS ON (SUBORDINADOS.MANAGER_ID = MANAGERS.ID)


/* 21 */
SELECT MAX(SALARY) AS SALARIO_MAXIMO,
	   MIN(SALARY) AS SALARIO_MINIMO,
	   AVG(SALARY) AS SALARIO_PROMEDIO,
	   SUM(SALARY) AS SALARIO_TOTAL
FROM TEST.EMPLOYEES

/* 22 */
SELECT CAST(MAX(CAST(HIRE_DATE AS INT)) AS DATETIME) AS FECHA_MAXIMA,
	   CAST(MIN(CAST(HIRE_DATE AS INT)) AS DATETIME) AS FECHA_MINIMA,
	   CAST(AVG(CAST(HIRE_DATE AS INT)) AS DATETIME) AS FECHA_PROMEDIO,
	   CAST(SUM(CAST(HIRE_DATE AS INT)) AS DATETIME) AS FECHA_TOTAL
FROM TEST.EMPLOYEES

/* 23 */
SELECT COUNT(DEPARTMENT_ID) AS CANT_EMPLEADOS_CON_DEPARTAMENTO
FROM TEST.EMPLOYEES

/* 24 */
SELECT COUNT(DEPARTMENT_ID) AS CANT_EMPLEADOS_CON_DEPARTAMENTO,
	   COUNT(JOB_ID) AS CANT_JOB_ID
FROM TEST.EMPLOYEES

/* 25 */
SELECT COUNT(DEPARTMENT_ID) AS CANT_DEPARTAMENTO,
	   AVG(SALARY) AS SALARIO_PROMEDIO
FROM TEST.EMPLOYEES 
WHERE DEPARTMENT_ID IS NOT NULL
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) < 1200

/* 26 */

declare @idEmpleado26 int;

SELECT @idEmpleado26 = MAX(ID)
FROM TEST.EMPLOYEES


INSERT INTO [TEST].[EMPLOYEES]
           ([ID]
           ,[FIRST_NAME]
           ,[LAST_NAME]
           ,[SALARY]
           ,[DEPARTMENT_ID]
           ,[JOB_ID]
           ,[HIRE_DATE]
           ,[MANAGER_ID])
     VALUES
           (@idEmpleado26 + 1  
		   ,'Nicolas'
           ,'Godoy'
		   ,1000.5
           ,31
		   ,'AD_PBC'
           ,'2009-04-01 00:00:00.000'
           ,4)

/* 27 */

declare @idEmpleado27 int

SELECT @idEmpleado27 = MAX(ID)
FROM TEST.EMPLOYEES

 INSERT INTO [TEST].[EMPLOYEES]
           ([ID]
           ,[FIRST_NAME]
           ,[LAST_NAME]
           ,[HIRE_DATE])
        VALUES
           (@idEmpleado27 + 1  
		   ,'Nicolas'
           ,'Godoy'
		   ,'2009-04-01 00:00:00.000')

/* 29 */

declare @idEmpleado29 int

SELECT @idEmpleado29 = MAX(ID)
FROM TEST.EMPLOYEES

declare @FirstName29 varchar(50)
declare @Salary29 decimal(10,2)

SELECT @FirstName29 = E.FIRST_NAME + ' NOMBRE CAMBIADO'
	  ,@Salary29 = E.SALARY + 200 
FROM TEST.EMPLOYEES AS E
WHERE ID = 12

INSERT INTO [TEST].[EMPLOYEES]
           ([ID]
           ,[FIRST_NAME]
           ,[LAST_NAME]
           ,[SALARY]
           ,[DEPARTMENT_ID]
           ,[JOB_ID]
           ,[HIRE_DATE]
           ,[MANAGER_ID])
        VALUES
           (@idEmpleado29 + 1  
		   ,@FirstName29
		   ,'Boulette'
           ,@Salary29
		   ,40
		   ,'FQ_OPR'
		   ,'2009-04-01 00:00:00.000'
		   ,NULL)


/* ACTUALIZACION DE REGISTROS */
/* 30 */

UPDATE [TEST].[EMPLOYEES]
   SET [SALARY] = 1100
      
 WHERE id = 10 

 /* 31 */
UPDATE [TEST].[EMPLOYEES] 
SET [SALARY] = [SALARY] * 1.1 
WHERE DEPARTMENT_ID = 40


/* ELIMINACION DE REGISTROS */
 /* 32 */
DELETE FROM [TEST].[EMPLOYEES]
WHERE id > 50  

 /* 33 */
DELETE FROM [TEST].[DEPARTMENTS]
WHERE id = 40

/* CREANDO FUNCION */
 /* 34 */
CREATE FUNCTION [dbo].[FnAntiguedadEmpleado](@ID int)RETURNS INT
AS

BEGIN
DECLARE @ANTIGUEDAD INT

SELECT @ANTIGUEDAD = (YEAR(GETDATE()) - YEAR(HIRE_DATE)) FROM TEST.EMPLOYEES 
WHERE EMPLOYEES.ID = @ID

RETURN @ANTIGUEDAD

END


/* CREANDO STORE PROCEDURE */
 /* 35 */
CREATE PROCEDURE [dbo].[sp_GetNombreAntiguedad]
	
	
AS
BEGIN
	SELECT ID,[FIRST_NAME],[LAST_NAME], dbo.FnAntiguedadEmpleado(ID) AS ANTIGUEDAD
	FROM TEST.EMPLOYEES
	WHERE EMPLOYEES.ID = ID AND EMPLOYEES.ID IS NOT NULL
	ORDER BY HIRE_DATE
	
END




